name;module;shape;parameters
module.tied_modules.embed.word_embeddings;VocabParallelEmbedding();(3200, 1024);tensor([[-0.0162, -0.0234, -0.0063,  ...,  0.0046, -0.0078,  0.0161],
        [ 0.0421,  0.0267, -0.0061,  ...,  0.0017,  0.0023, -0.0053],
        [-0.0376, -0.0522,  0.0094,  ..., -0.0106,  0.0088,  0.0119],
        ...,
        [-0.0179, -0.0017,  0.0284,  ..., -0.0425, -0.0087, -0.0052],
        [ 0.0007, -0.0247,  0.0125,  ..., -0.0182, -0.0294,  0.0202],
        [-0.0013,  0.0111, -0.0256,  ...,  0.0127, -0.0091,  0.0187]],
       device='cuda:0');
module.tied_modules.embed.position_embeddings;Embedding(1024, 1024);(1024, 1024);tensor([[-0.0130,  0.0139,  0.0489,  ...,  0.0174, -0.0157,  0.0094],
        [-0.0360,  0.0233, -0.0218,  ...,  0.0372, -0.0131, -0.0235],
        [-0.0001, -0.0333,  0.0098,  ..., -0.0026, -0.0134,  0.0163],
        ...,
        [ 0.0174,  0.0488, -0.0296,  ..., -0.0296,  0.0321, -0.0157],
        [ 0.0169,  0.0214, -0.0077,  ..., -0.0241, -0.0114,  0.0039],
        [-0.0063,  0.0076, -0.0233,  ..., -0.0020, -0.0520,  0.0020]],
       device='cuda:0');
module.2.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000], device='cuda:0');
module.2.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([-6.8370e-06, -6.2967e-07, -2.2953e-06,  ...,  4.7200e-06,
        -2.2815e-06, -2.7902e-06], device='cuda:0');
module.2.attention.query_key_value;ColumnParallelLinear();(192, 1024);tensor([[-0.0258, -0.0102, -0.0072,  ...,  0.0139, -0.0073,  0.0159],
        [-0.0231, -0.0164,  0.0109,  ...,  0.0091,  0.0081, -0.0212],
        [ 0.0332, -0.0396,  0.0116,  ...,  0.0286,  0.0214,  0.0088],
        ...,
        [ 0.0033, -0.0179,  0.0343,  ..., -0.0332,  0.0146,  0.0115],
        [ 0.0157,  0.0294,  0.0256,  ..., -0.0283, -0.0227, -0.0135],
        [-0.0184,  0.0229,  0.0080,  ...,  0.0227,  0.0250,  0.0014]],
       device='cuda:0');
module.2.attention.query_key_value;ColumnParallelLinear();(192,);tensor([-6.4735e-08, -8.6661e-08,  7.2918e-08, -1.3823e-07,  3.3044e-08,
        -1.0860e-07, -6.4356e-08,  1.3259e-07, -1.3227e-08,  2.1889e-08,
         3.2935e-08,  7.5505e-08, -9.8247e-08, -3.9832e-08, -9.5963e-08,
        -6.3421e-08,  2.5856e-07, -6.1453e-08, -3.8981e-09, -1.0836e-07,
         9.6689e-08,  1.7265e-07,  7.6439e-08, -4.6356e-08, -8.5350e-08,
         1.4613e-08, -1.1268e-07,  3.9171e-07, -1.0304e-07, -1.4795e-07,
         1.1731e-07, -1.1639e-07, -1.6652e-07, -8.3669e-09,  6.7817e-08,
         1.0817e-07, -4.8560e-08, -1.3279e-07, -1.7894e-07,  4.4964e-08,
         4.9694e-08,  8.9254e-08, -1.0708e-07, -1.6790e-07,  7.7160e-08,
         3.8477e-08,  1.8714e-07, -2.3088e-08,  1.0761e-08, -1.2914e-07,
        -6.4903e-08, -1.2499e-07,  2.9087e-07, -5.2322e-08,  1.2410e-07,
        -1.5880e-08,  1.0193e-07, -1.9990e-08, -4.4584e-08, -9.5861e-08,
         2.2789e-08, -1.5067e-08, -2.1393e-08, -6.1068e-08,  6.4269e-15,
         1.3504e-15,  2.7208e-15, -2.8034e-15,  2.7413e-15, -5.7511e-15,
        -5.2587e-15, -5.4197e-16,  3.9488e-16,  1.7991e-15, -4.7303e-15,
        -1.5286e-15,  1.6120e-16, -3.2274e-15,  3.0989e-16,  2.7892e-15,
        -4.1521e-15, -1.9877e-15, -4.1346e-15,  5.3586e-15, -3.7631e-15,
        -2.4380e-15, -2.1132e-15,  2.7762e-15, -5.4266e-15, -1.2318e-15,
         2.9598e-15, -1.3682e-15,  2.9182e-15, -3.0885e-15, -6.2383e-15,
        -2.0226e-15, -6.9278e-16, -7.0530e-16, -2.7581e-15,  6.1775e-15,
        -3.9315e-15, -1.5774e-16, -7.9696e-16,  6.0245e-15, -2.4135e-15,
         1.1111e-15,  4.9499e-15, -9.9683e-15,  3.7391e-15, -4.8772e-15,
        -1.4863e-15, -7.2220e-15,  6.9837e-16, -4.7168e-15, -1.7200e-15,
        -7.5673e-16, -3.7836e-16, -1.0565e-15,  1.3453e-15,  3.4692e-15,
         3.1817e-15,  2.1151e-15, -8.0211e-15, -1.3237e-15,  2.4588e-15,
         1.8718e-15,  5.4490e-16,  2.3790e-15,  1.8325e-06, -1.9025e-06,
        -4.0313e-06, -1.2933e-06, -1.8054e-05, -5.3434e-07,  1.0916e-05,
        -7.0367e-06,  1.8610e-06,  2.9309e-06, -8.8309e-07, -2.7325e-06,
        -5.0013e-06,  1.2695e-05,  3.2774e-06, -1.9185e-06,  5.4476e-06,
         1.1001e-07,  4.1471e-06, -1.1519e-05,  4.6591e-06, -2.8406e-06,
         7.4102e-06, -4.0199e-06,  6.6190e-06,  3.3232e-07,  3.4975e-06,
         2.0290e-06,  4.6638e-06,  2.5404e-06,  3.4004e-06,  1.0880e-05,
        -6.6130e-07,  6.4791e-06,  6.1856e-07,  1.3062e-05,  4.0316e-06,
         1.1287e-06,  8.8736e-06,  2.9197e-06, -8.9854e-06, -5.1186e-06,
        -3.5362e-06, -4.7897e-06, -2.8132e-06, -1.8675e-06,  6.6829e-06,
        -7.9889e-06, -1.1024e-05,  1.0776e-06, -1.1120e-05,  2.4136e-06,
        -4.3815e-06, -8.3374e-06, -6.4426e-06,  2.8391e-07,  2.6179e-06,
        -1.4154e-06, -4.1769e-08, -3.3788e-06,  8.5908e-06, -9.2746e-06,
         2.6954e-06, -5.8531e-06], device='cuda:0');
module.2.attention.dense;RowParallelLinear();(1024, 64);tensor([[-8.8102e-03, -2.2901e-02, -1.9033e-02,  ...,  2.9170e-02,
          1.0307e-02,  1.4397e-02],
        [ 4.4111e-03, -1.8729e-02, -1.4790e-02,  ...,  3.5201e-03,
          1.5537e-02, -1.5865e-02],
        [ 1.5198e-02, -3.8531e-03,  1.3379e-02,  ..., -8.8373e-03,
         -1.1966e-02,  2.1795e-02],
        ...,
        [ 2.4357e-03,  3.0744e-03,  1.1653e-03,  ..., -3.2814e-05,
          2.4912e-02,  1.6320e-02],
        [-1.4179e-02,  8.8671e-03, -9.5974e-03,  ..., -4.7629e-03,
         -2.0125e-02, -6.3335e-04],
        [-1.9632e-02, -1.1433e-02, -4.0946e-03,  ..., -1.5308e-02,
          2.1142e-02,  1.5216e-02]], device='cuda:0');
module.2.attention.dense;RowParallelLinear();(1024,);tensor([-2.8643e-05,  1.4121e-05,  2.6624e-05,  ..., -1.0501e-05,
        -7.4630e-06,  7.3358e-06], device='cuda:0');
module.2.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000], device='cuda:0');
module.2.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([-1.0457e-06,  5.2020e-07,  9.7062e-07,  ..., -2.7887e-07,
        -2.7312e-07,  2.6215e-07], device='cuda:0');
module.2.mlp.dense_h_to_4h;ColumnParallelLinear();(256, 1024);tensor([[ 0.0170, -0.0104,  0.0009,  ..., -0.0152, -0.0194, -0.0039],
        [-0.0028, -0.0035, -0.0204,  ..., -0.0257,  0.0057,  0.0250],
        [ 0.0045, -0.0137,  0.0185,  ...,  0.0427, -0.0012, -0.0203],
        ...,
        [ 0.0103, -0.0152, -0.0007,  ...,  0.0054, -0.0105, -0.0163],
        [-0.0381, -0.0232,  0.0112,  ...,  0.0023,  0.0022, -0.0293],
        [ 0.0218,  0.0195,  0.0044,  ..., -0.0312,  0.0137,  0.0039]],
       device='cuda:0');
module.2.mlp.dense_h_to_4h;ColumnParallelLinear();(256,);tensor([-8.7082e-07, -2.6174e-07,  4.5656e-07, -1.3753e-08,  4.5786e-07,
        -3.6308e-07,  7.0759e-07, -8.7182e-08, -1.0499e-07,  7.2811e-07,
         1.6714e-08, -8.7812e-07, -2.2171e-07, -3.4189e-07, -8.5036e-08,
        -9.5933e-08, -1.2497e-07, -6.3087e-08, -4.7242e-07,  2.5822e-07,
         3.2930e-07, -9.1445e-09,  4.7196e-07, -1.8368e-07, -2.6482e-07,
         2.5957e-07, -1.5310e-07,  1.2053e-07, -1.4650e-07,  3.2264e-07,
         2.6869e-08,  1.7496e-08, -4.9297e-08,  4.1463e-07, -2.5045e-07,
        -6.9615e-08, -3.2249e-07,  2.3193e-07,  3.2949e-07, -4.0132e-07,
        -4.7354e-07,  1.8167e-07, -5.2120e-07, -7.2368e-08, -3.4458e-07,
         2.3969e-07,  6.3301e-07,  5.2120e-08,  1.6437e-07, -4.3512e-07,
        -3.5896e-07,  7.1609e-07,  1.4162e-07,  4.5831e-07, -3.7166e-07,
        -1.4468e-07,  1.1208e-07,  2.9192e-07,  1.1804e-07,  1.7865e-08,
        -1.0326e-07, -3.8258e-07, -1.5556e-07,  6.9309e-07, -6.8572e-08,
        -1.6145e-07,  4.3550e-07,  4.9127e-08, -4.3672e-07, -2.8114e-07,
        -3.9078e-07, -4.8516e-07,  2.5639e-07,  1.8707e-09,  1.4487e-08,
        -2.1526e-07, -6.9938e-07,  3.4235e-07,  4.9811e-07, -9.2103e-07,
         3.1867e-07, -3.4704e-07,  3.1171e-07, -9.1653e-08,  2.6058e-07,
         7.1235e-07, -2.2778e-07, -4.5925e-07,  2.0638e-07, -4.0359e-08,
        -3.6707e-07, -1.5751e-07, -3.3475e-07,  4.8521e-07, -2.8765e-07,
         6.3263e-07,  1.6745e-07, -1.1027e-07,  1.0759e-07,  1.7979e-08,
        -1.9580e-07,  1.4117e-07,  3.8343e-07, -4.0248e-07,  4.7152e-07,
        -5.1416e-07, -6.7377e-08, -2.3618e-07, -5.5780e-07, -9.3559e-08,
        -7.5741e-07, -4.5958e-07, -3.5106e-07, -2.8549e-07, -1.5030e-07,
         3.6005e-07,  4.6967e-07,  4.2853e-07, -3.5662e-07,  2.1764e-07,
         8.8817e-08,  2.4608e-07,  3.0649e-07, -1.4557e-07,  5.2504e-07,
         6.2647e-07, -2.4090e-08, -6.1574e-08, -3.9126e-07,  6.4386e-07,
        -1.4121e-07, -2.8319e-07,  2.9534e-07, -8.0647e-07, -5.6099e-08,
        -7.8554e-08, -6.3663e-07,  5.1361e-07,  2.4931e-07, -3.9534e-08,
        -3.6030e-07,  4.2164e-07, -1.8252e-07, -2.3835e-07, -1.8125e-07,
         3.6783e-07,  2.4164e-07, -1.7272e-07,  3.8762e-08,  3.1168e-08,
         1.6418e-08, -8.1672e-07, -4.2832e-08, -2.1935e-07,  8.4610e-08,
        -5.0100e-08,  2.7475e-07, -1.0176e-08, -4.5119e-07, -8.6331e-07,
        -6.8172e-07,  3.1909e-07, -2.8124e-07, -6.1696e-07,  8.2455e-07,
        -3.0074e-07, -2.1112e-07, -1.2786e-07,  1.7662e-07, -3.9385e-07,
         6.4923e-07, -2.4394e-08,  1.4386e-07,  2.8817e-08,  1.5037e-08,
        -1.4856e-08,  9.1572e-08,  3.3494e-07, -2.6694e-07,  1.3397e-07,
         8.1771e-07,  6.4853e-07, -6.9739e-07, -3.8196e-07,  2.7818e-08,
         2.5578e-07, -7.3811e-07,  3.7697e-07, -8.5455e-07,  3.0437e-07,
        -6.4202e-07,  1.0781e-07, -2.3808e-07,  2.6902e-07, -3.3405e-07,
         4.8814e-08, -3.6818e-07, -7.8278e-08, -1.2879e-07,  4.8258e-07,
        -3.9414e-07,  1.8786e-07,  3.7647e-07, -1.9047e-07, -4.6096e-07,
        -1.4116e-07,  2.5262e-07, -2.0270e-07,  2.8051e-07, -2.3064e-07,
        -2.7565e-07,  7.9666e-08,  3.3146e-07,  3.4153e-07,  5.0052e-08,
         1.9388e-08,  3.4972e-07, -7.9878e-07,  1.3695e-07,  4.5749e-07,
        -2.2546e-07,  2.3412e-07,  5.9221e-07, -9.0351e-08,  7.4427e-07,
        -3.8304e-07, -1.3460e-07,  2.0004e-07,  2.3043e-07,  1.1000e-07,
        -8.6352e-07, -6.1357e-08, -5.5183e-08,  2.6726e-08, -6.3016e-07,
        -2.8773e-07,  2.2270e-07,  3.2374e-07,  2.5068e-07, -1.3704e-07,
         7.9149e-08, -1.9476e-07,  8.3392e-09, -1.3403e-07,  3.9271e-07,
         2.0754e-07,  7.9314e-07, -2.2314e-07,  2.4065e-07, -7.3818e-08,
         4.3933e-08, -1.9280e-08, -4.2682e-07,  5.1466e-07,  3.8666e-07,
         1.5201e-07], device='cuda:0');
module.2.mlp.dense_4h_to_h;RowParallelLinear();(1024, 256);tensor([[ 0.0070,  0.0014,  0.0004,  ...,  0.0216,  0.0176, -0.0200],
        [-0.0059, -0.0107,  0.0111,  ..., -0.0220, -0.0031,  0.0148],
        [-0.0152, -0.0048,  0.0085,  ...,  0.0177, -0.0004,  0.0043],
        ...,
        [ 0.0094,  0.0105, -0.0003,  ...,  0.0115,  0.0002, -0.0279],
        [ 0.0297,  0.0179, -0.0236,  ..., -0.0011, -0.0139,  0.0147],
        [ 0.0024, -0.0004,  0.0187,  ...,  0.0041,  0.0208,  0.0107]],
       device='cuda:0');
module.2.mlp.dense_4h_to_h;RowParallelLinear();(1024,);tensor([ 3.5072e-07, -6.1701e-07, -5.7381e-07,  ..., -3.1622e-06,
        -7.0885e-09,  3.4073e-07], device='cuda:0');
module.4;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000], device='cuda:0');
module.4;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([ 2.9947e-07, -1.6608e-07, -6.6290e-07,  ..., -8.2493e-07,
        -1.9948e-07, -2.9883e-07], device='cuda:0');
