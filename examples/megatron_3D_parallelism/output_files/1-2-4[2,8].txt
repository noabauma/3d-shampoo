name;module;shape;partitioning_ranks;precs
module.tied_modules.embed.word_embeddings;VocabParallelEmbedding();(12672, 1024);0;[]
module.tied_modules.embed.position_embeddings;Embedding(1024, 1024);(1024, 1024);0;[]
module.2.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.2.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.2.attention.query_key_value;ColumnParallelLinear();(768, 1024);0;[torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024])]
module.2.attention.query_key_value;ColumnParallelLinear();(768,);0;[]
module.2.attention.dense;RowParallelLinear();(1024, 256);0;[torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128])]
module.2.attention.dense;RowParallelLinear();(1024,);0;[]
module.2.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.2.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.2.mlp.dense_h_to_4h;ColumnParallelLinear();(1024, 1024);0;[torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024])]
module.2.mlp.dense_h_to_4h;ColumnParallelLinear();(1024,);0;[]
module.2.mlp.dense_4h_to_h;RowParallelLinear();(1024, 1024);0;[torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512])]
module.2.mlp.dense_4h_to_h;RowParallelLinear();(1024,);0;[]
module.3.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.3.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.3.attention.query_key_value;ColumnParallelLinear();(768, 1024);0;[torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024])]
module.3.attention.query_key_value;ColumnParallelLinear();(768,);0;[]
module.3.attention.dense;RowParallelLinear();(1024, 256);0;[torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128])]
module.3.attention.dense;RowParallelLinear();(1024,);0;[]
module.3.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.3.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.3.mlp.dense_h_to_4h;ColumnParallelLinear();(1024, 1024);0;[torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024])]
module.3.mlp.dense_h_to_4h;ColumnParallelLinear();(1024,);0;[]
module.3.mlp.dense_4h_to_h;RowParallelLinear();(1024, 1024);0;[torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512])]
module.3.mlp.dense_4h_to_h;RowParallelLinear();(1024,);0;[]
module.4.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.4.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.4.attention.query_key_value;ColumnParallelLinear();(768, 1024);0;[torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024])]
module.4.attention.query_key_value;ColumnParallelLinear();(768,);0;[]
module.4.attention.dense;RowParallelLinear();(1024, 256);0;[torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128])]
module.4.attention.dense;RowParallelLinear();(1024,);0;[]
module.4.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.4.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.4.mlp.dense_h_to_4h;ColumnParallelLinear();(1024, 1024);0;[torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024])]
module.4.mlp.dense_h_to_4h;ColumnParallelLinear();(1024,);0;[]
module.4.mlp.dense_4h_to_h;RowParallelLinear();(1024, 1024);0;[torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512])]
module.4.mlp.dense_4h_to_h;RowParallelLinear();(1024,);0;[]
module.5.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.5.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.5.attention.query_key_value;ColumnParallelLinear();(768, 1024);0;[torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024])]
module.5.attention.query_key_value;ColumnParallelLinear();(768,);0;[]
module.5.attention.dense;RowParallelLinear();(1024, 256);0;[torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128])]
module.5.attention.dense;RowParallelLinear();(1024,);0;[]
module.5.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.5.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.5.mlp.dense_h_to_4h;ColumnParallelLinear();(1024, 1024);0;[torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024])]
module.5.mlp.dense_h_to_4h;ColumnParallelLinear();(1024,);0;[]
module.5.mlp.dense_4h_to_h;RowParallelLinear();(1024, 1024);0;[torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512])]
module.5.mlp.dense_4h_to_h;RowParallelLinear();(1024,);0;[]
