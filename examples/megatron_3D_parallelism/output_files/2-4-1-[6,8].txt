name;module;shape;partitioning_ranks;prec_matrices
module.tied_modules.embed.word_embeddings;VocabParallelEmbedding();(50304, 1024);0;[]
module.tied_modules.embed.position_embeddings;Embedding(1024, 1024);(1024, 1024);0;[]
module.8.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.8.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.8.attention.query_key_value;ColumnParallelLinear();(3072, 1024);0;[torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024]), torch.Size([384, 384]), torch.Size([1024, 1024])]
module.8.attention.query_key_value;ColumnParallelLinear();(3072,);0;[]
module.8.attention.dense;RowParallelLinear();(1024, 1024);0;[torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128]), torch.Size([1024, 1024]), torch.Size([128, 128])]
module.8.attention.dense;RowParallelLinear();(1024,);0;[]
module.8.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.8.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);0;[]
module.8.mlp.dense_h_to_4h;ColumnParallelLinear();(4096, 1024);0;[torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024])]
module.8.mlp.dense_h_to_4h;ColumnParallelLinear();(4096,);0;[]
module.8.mlp.dense_4h_to_h;RowParallelLinear();(1024, 4096);0;[torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512]), torch.Size([1024, 1024]), torch.Size([512, 512])]
module.8.mlp.dense_4h_to_h;RowParallelLinear();(1024,);0;[]
module.9.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);1;
module.9.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);1;
module.9.attention.query_key_value;ColumnParallelLinear();(3072, 1024);1;
module.9.attention.query_key_value;ColumnParallelLinear();(3072,);1;
module.9.attention.dense;RowParallelLinear();(1024, 1024);1;
module.9.attention.dense;RowParallelLinear();(1024,);1;
module.9.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);1;
module.9.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);1;
module.9.mlp.dense_h_to_4h;ColumnParallelLinear();(4096, 1024);1;
module.9.mlp.dense_h_to_4h;ColumnParallelLinear();(4096,);1;
module.9.mlp.dense_4h_to_h;RowParallelLinear();(1024, 4096);1;
module.9.mlp.dense_4h_to_h;RowParallelLinear();(1024,);1;
module.11;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);1;
module.11;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);1;
