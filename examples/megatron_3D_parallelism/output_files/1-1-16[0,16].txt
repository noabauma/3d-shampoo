{ProcessCoord(pipe=0, data=0, model=0): 0, ProcessCoord(pipe=0, data=0, model=1): 1, ProcessCoord(pipe=0, data=0, model=2): 2, ProcessCoord(pipe=0, data=0, model=3): 3, ProcessCoord(pipe=0, data=0, model=4): 4, ProcessCoord(pipe=0, data=0, model=5): 5, ProcessCoord(pipe=0, data=0, model=6): 6, ProcessCoord(pipe=0, data=0, model=7): 7, ProcessCoord(pipe=0, data=0, model=8): 8, ProcessCoord(pipe=0, data=0, model=9): 9, ProcessCoord(pipe=0, data=0, model=10): 10, ProcessCoord(pipe=0, data=0, model=11): 11, ProcessCoord(pipe=0, data=0, model=12): 12, ProcessCoord(pipe=0, data=0, model=13): 13, ProcessCoord(pipe=0, data=0, model=14): 14, ProcessCoord(pipe=0, data=0, model=15): 15}
name;module;shape;parameters
module.tied_modules.embed.word_embeddings;VocabParallelEmbedding();(3200, 1024);tensor([[ 0.0123, -0.0157,  0.0075,  ...,  0.0047,  0.0079,  0.0032],
        [ 0.0083, -0.0455, -0.0179,  ...,  0.0145,  0.0180,  0.0066],
        [-0.0314,  0.0031, -0.0170,  ...,  0.0018, -0.0125,  0.0014],
        ...,
        [ 0.0128,  0.0190, -0.0247,  ..., -0.0019, -0.0358, -0.0303],
        [ 0.0169,  0.0064,  0.0048,  ...,  0.0365, -0.0269,  0.0229],
        [-0.0273, -0.0064,  0.0072,  ...,  0.0208,  0.0033, -0.0205]],
       device='cuda:0');
module.tied_modules.embed.position_embeddings;Embedding(1024, 1024);(1024, 1024);tensor([[-0.0130,  0.0139,  0.0489,  ...,  0.0174, -0.0157,  0.0094],
        [-0.0360,  0.0233, -0.0218,  ...,  0.0372, -0.0131, -0.0235],
        [-0.0001, -0.0333,  0.0098,  ..., -0.0026, -0.0134,  0.0163],
        ...,
        [ 0.0174,  0.0488, -0.0296,  ..., -0.0296,  0.0321, -0.0157],
        [ 0.0169,  0.0214, -0.0077,  ..., -0.0241, -0.0114,  0.0039],
        [-0.0063,  0.0076, -0.0233,  ..., -0.0020, -0.0520,  0.0020]],
       device='cuda:0');
module.2.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000], device='cuda:0');
module.2.input_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([-6.8370e-06, -6.2967e-07, -2.2953e-06,  ...,  4.7200e-06,
        -2.2815e-06, -2.7902e-06], device='cuda:0');
module.2.attention.query_key_value;ColumnParallelLinear();(192, 1024);tensor([[ 6.4730e-04,  4.4744e-02, -1.7245e-02,  ..., -2.7846e-02,
          3.3423e-02, -8.9887e-03],
        [ 3.2183e-02, -1.8397e-03, -1.4366e-02,  ..., -2.8443e-02,
          1.6971e-02, -1.6179e-02],
        [ 3.0677e-03,  7.5326e-05,  2.3561e-03,  ..., -7.0609e-03,
         -8.5195e-03,  2.4277e-02],
        ...,
        [-3.8303e-03, -1.4201e-02,  3.9128e-02,  ..., -7.6876e-04,
          1.4514e-02, -2.2029e-02],
        [-2.3458e-02,  1.1389e-03, -3.9170e-02,  ...,  2.1401e-02,
          3.2084e-02,  1.9958e-03],
        [-1.4680e-02,  1.7069e-02, -1.5593e-02,  ...,  1.2488e-02,
         -2.6479e-02,  5.1253e-03]], device='cuda:0');
module.2.attention.query_key_value;ColumnParallelLinear();(192,);tensor([-3.6343e-08,  1.3203e-07, -3.5268e-08, -1.0042e-07, -1.0357e-08,
        -1.8155e-08,  9.0605e-08, -4.2396e-08, -5.7743e-09, -3.3058e-08,
         3.4550e-08,  1.3524e-07, -4.5301e-08,  8.7147e-08, -1.0043e-07,
        -2.7763e-08,  5.4327e-08,  1.0479e-07, -7.3588e-08,  2.6166e-08,
        -7.9648e-08, -1.0228e-07,  1.1307e-07,  1.8195e-07,  3.2591e-08,
        -1.0303e-07,  8.7966e-08,  1.7833e-07,  1.6910e-07, -2.7878e-08,
         1.2960e-07, -1.3646e-07,  3.1208e-08,  9.9530e-08,  1.8144e-08,
        -1.2467e-08,  1.0938e-07,  2.9893e-09, -1.4090e-08,  2.9752e-08,
         9.0915e-08,  1.3644e-07,  7.3326e-08,  4.9817e-08, -2.8741e-08,
         9.9126e-09,  2.6789e-08,  8.4296e-08,  8.6710e-08,  1.9522e-08,
         5.4453e-09, -8.5797e-08,  3.5321e-08, -6.6620e-08, -2.6747e-08,
         2.1119e-08, -1.1089e-07, -4.1101e-08,  3.2417e-08,  1.3716e-07,
         1.2529e-07,  3.1747e-08,  7.0652e-08, -3.4638e-08, -3.1044e-15,
        -4.5033e-15,  3.1338e-15, -4.6283e-15,  3.1692e-15,  1.9880e-15,
        -3.9915e-15,  6.0821e-15, -8.7210e-16,  2.4961e-15,  4.3944e-15,
        -2.0277e-16, -4.5401e-15, -2.2446e-15,  2.2409e-15,  5.7485e-15,
        -1.6890e-15,  5.0898e-15, -1.5481e-16,  4.8889e-15,  3.8445e-15,
         6.7327e-15,  1.0459e-14, -1.8924e-15, -2.8068e-15, -1.2381e-14,
         6.8718e-16,  2.9081e-15, -7.3792e-15,  4.0797e-15,  2.1988e-15,
         1.2605e-15, -2.6888e-15,  3.0959e-15, -3.1412e-15,  3.3509e-15,
        -7.3461e-16, -7.2209e-17,  9.0837e-15, -2.7453e-15, -2.0442e-15,
        -1.3893e-15,  4.0208e-16,  5.9259e-16, -1.5822e-15,  6.7919e-16,
        -2.3610e-15,  1.9872e-15, -3.2220e-15,  8.7104e-16,  8.6331e-17,
         6.2483e-15,  3.7618e-15,  2.7455e-15,  3.3986e-16, -4.4951e-16,
         4.2830e-15, -3.4418e-15, -2.9227e-15,  1.0043e-15, -3.3999e-16,
        -1.6608e-15, -1.6528e-15, -1.7826e-16, -5.5648e-06,  3.1554e-06,
        -3.3050e-06, -4.1713e-07, -3.4440e-06, -3.3604e-06, -1.2889e-06,
        -1.2257e-06,  3.6781e-06,  3.1910e-06, -4.3927e-06,  1.3718e-07,
        -5.3907e-06, -1.6741e-06, -8.8546e-07,  5.2926e-06,  7.9889e-06,
        -1.4741e-06,  4.7022e-06, -6.6134e-07,  3.8723e-06, -2.6437e-06,
        -1.7418e-06,  7.1024e-07, -4.9051e-06, -2.9489e-06, -5.1530e-06,
         4.9448e-06,  7.8666e-06, -9.4165e-06, -2.9992e-06, -8.3066e-07,
        -6.1782e-06, -6.3836e-06, -1.5510e-06, -3.0104e-06,  2.0235e-06,
         8.6590e-07,  1.0761e-06, -4.3922e-07,  7.9482e-06, -9.1626e-06,
         4.5613e-06,  1.6208e-05,  1.9661e-06,  5.0867e-06, -3.1810e-06,
        -6.0426e-06, -1.4307e-06,  4.4002e-06, -5.2400e-06, -4.2538e-06,
         1.5910e-06, -2.3120e-06,  6.2057e-06,  6.1421e-06,  1.5433e-06,
        -3.4237e-06, -6.2973e-06, -6.4788e-07, -2.2308e-06, -1.9547e-06,
        -1.2835e-05,  6.9978e-06], device='cuda:0');
module.2.attention.dense;RowParallelLinear();(1024, 64);tensor([[ 1.6068e-02, -1.3968e-02, -1.0591e-03,  ...,  3.4073e-03,
          1.3763e-02,  1.7727e-05],
        [ 2.1561e-02, -4.3482e-03, -8.2989e-03,  ..., -1.3957e-02,
         -1.0481e-02,  8.1786e-03],
        [ 8.6533e-03, -8.4071e-03,  2.2145e-04,  ..., -2.5252e-03,
         -2.6899e-03, -4.0657e-03],
        ...,
        [-9.8882e-03,  1.3050e-02, -7.3914e-03,  ..., -1.6740e-02,
         -1.8030e-02,  5.9842e-03],
        [ 2.7288e-03, -6.2287e-03, -1.5374e-02,  ..., -9.4355e-03,
         -3.6592e-02, -1.2648e-02],
        [-3.1404e-03, -4.6144e-03, -1.3619e-02,  ..., -2.0509e-02,
         -3.0131e-04, -2.0586e-02]], device='cuda:0');
module.2.attention.dense;RowParallelLinear();(1024,);tensor([-2.8643e-05,  1.4121e-05,  2.6624e-05,  ..., -1.0501e-05,
        -7.4630e-06,  7.3358e-06], device='cuda:0');
module.2.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000], device='cuda:0');
module.2.post_attention_layernorm;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([-1.0457e-06,  5.2020e-07,  9.7062e-07,  ..., -2.7887e-07,
        -2.7312e-07,  2.6215e-07], device='cuda:0');
module.2.mlp.dense_h_to_4h;ColumnParallelLinear();(256, 1024);tensor([[-0.0311, -0.0136, -0.0353,  ..., -0.0150, -0.0159, -0.0196],
        [-0.0072,  0.0096,  0.0285,  ..., -0.0272, -0.0566, -0.0044],
        [ 0.0178, -0.0177, -0.0002,  ..., -0.0140,  0.0125,  0.0091],
        ...,
        [-0.0313, -0.0085,  0.0038,  ...,  0.0064,  0.0330, -0.0052],
        [-0.0181, -0.0182, -0.0022,  ...,  0.0248, -0.0155,  0.0204],
        [ 0.0132, -0.0162,  0.0157,  ...,  0.0180, -0.0450, -0.0233]],
       device='cuda:0');
module.2.mlp.dense_h_to_4h;ColumnParallelLinear();(256,);tensor([-3.3369e-07, -5.4601e-07, -5.8831e-07, -3.4886e-07, -5.5463e-09,
        -1.3702e-07,  8.2359e-07, -4.2862e-07, -3.6758e-07,  2.5962e-07,
         1.9478e-07,  4.6574e-07,  3.4176e-09, -1.6317e-07, -5.6456e-07,
         4.4290e-07,  2.8050e-07, -7.9025e-07,  1.5263e-08,  7.5071e-07,
        -4.3576e-07, -3.7523e-07,  2.7560e-07,  3.8090e-07, -5.9291e-07,
        -5.8939e-07,  9.6603e-08,  9.5139e-07,  2.5817e-08, -5.0599e-07,
        -9.2987e-07,  4.2385e-07,  3.4089e-08,  2.5117e-07, -4.6027e-07,
        -3.2468e-07,  6.7640e-07,  1.1465e-06,  1.9549e-07, -3.7657e-07,
         3.4435e-07,  5.2559e-07, -2.0594e-07, -8.2906e-07,  2.1278e-07,
         2.1545e-07, -4.3826e-07, -6.9500e-07,  1.2118e-07, -3.0833e-07,
         5.3896e-08, -1.7157e-07,  3.4518e-07, -1.9012e-07, -7.6945e-08,
         4.8243e-07,  6.0394e-08, -1.6481e-07,  1.8825e-07,  7.4157e-07,
         1.8661e-07, -3.7182e-07,  4.1598e-07,  9.9397e-08,  2.0193e-07,
        -2.3498e-08,  1.8658e-07, -3.2619e-07,  4.4946e-07,  3.4987e-07,
         1.9204e-07,  2.8929e-07, -1.5945e-08, -1.6514e-07, -2.4667e-07,
         3.4315e-08,  3.4733e-08,  5.0940e-07, -2.4733e-07, -1.0325e-06,
        -2.6921e-07,  2.2667e-07, -6.7124e-08, -6.6924e-07,  9.6322e-09,
        -1.3749e-07,  1.2890e-07,  4.9185e-08,  1.0468e-07, -4.5021e-09,
         4.4160e-07,  1.7709e-08,  2.3536e-07, -7.7308e-08,  3.6699e-08,
         7.1770e-07, -3.4128e-08,  8.2799e-07,  6.7046e-07,  4.8757e-09,
        -7.6386e-08, -4.4235e-07,  1.3870e-08,  7.9482e-08,  1.7940e-08,
         4.0709e-07, -1.5237e-07,  1.9335e-07, -6.3850e-09, -1.5565e-07,
         1.1699e-06,  9.9532e-10, -4.5305e-07,  1.4411e-07, -1.9843e-07,
         3.4811e-07,  5.3106e-07,  4.4420e-07,  9.7726e-08, -2.4014e-07,
         3.2396e-07, -1.5234e-07, -1.5827e-07, -4.9852e-08, -2.1363e-07,
         2.6700e-07,  1.0579e-07, -1.7788e-07, -1.9871e-07, -4.3697e-07,
         3.5348e-07,  3.6348e-07, -2.0797e-07,  3.0010e-07, -2.0919e-07,
        -4.6813e-07,  2.0582e-07,  2.1921e-07, -4.4747e-07,  4.3409e-07,
        -2.8591e-07, -8.9387e-08, -8.7467e-08,  6.1269e-07, -9.2179e-07,
        -1.0212e-06, -1.0824e-07, -8.7961e-08,  3.3697e-07, -2.1999e-07,
         8.5635e-07,  4.6519e-07,  2.2300e-07,  2.4556e-07, -2.5735e-07,
        -4.6731e-07,  2.5089e-07,  2.9827e-07, -5.3335e-07,  2.6980e-07,
         1.1181e-08, -9.0127e-07, -1.7083e-07, -7.9363e-08,  1.0139e-07,
         6.2567e-07, -5.4494e-07,  3.4146e-07,  1.9607e-11,  2.1111e-07,
        -3.1291e-07,  7.3048e-07,  2.0584e-07,  4.5541e-07,  2.0458e-07,
         1.6026e-07,  2.4736e-07, -2.7928e-08, -3.8145e-09,  2.3809e-07,
         4.8453e-07,  4.7217e-07, -5.0740e-07, -6.3567e-09, -4.5603e-08,
        -2.3285e-07,  6.0076e-07,  5.4282e-07, -4.0276e-08,  3.2615e-07,
        -1.9582e-07, -3.0571e-07, -6.3123e-07, -4.4217e-07, -6.0951e-07,
         5.9571e-07, -2.6010e-07,  5.9717e-08,  3.1665e-07, -1.0654e-08,
        -2.7670e-07,  2.0528e-08,  2.6643e-11,  1.9019e-09, -1.9412e-07,
        -4.0354e-07,  2.7865e-08, -3.7816e-07, -3.8673e-08, -5.8554e-07,
        -2.6753e-07,  5.4596e-07, -1.9422e-07, -2.0145e-07,  3.5734e-07,
         3.9455e-07,  1.9117e-07, -2.1257e-07, -3.4505e-07,  6.6952e-07,
        -1.1236e-07,  1.5486e-08, -4.6363e-07,  2.9911e-07,  5.4011e-07,
        -1.5792e-07,  3.6767e-07,  3.4537e-07, -2.7997e-07,  1.2458e-07,
        -5.1420e-07,  1.8468e-07,  7.2686e-08,  6.4261e-08, -1.3901e-07,
        -4.9096e-08, -3.1129e-07, -4.5306e-07, -4.0153e-07,  7.4418e-07,
        -1.6992e-07, -2.0297e-07,  1.6045e-07, -6.4233e-08,  1.2360e-07,
        -3.4231e-08,  3.2502e-08, -1.9169e-07,  5.4940e-07,  3.1604e-07,
         2.8123e-08,  2.3094e-07, -1.9945e-07,  3.1176e-07,  2.5577e-07,
         3.8091e-07], device='cuda:0');
module.2.mlp.dense_4h_to_h;RowParallelLinear();(1024, 256);tensor([[ 0.0084,  0.0197, -0.0095,  ...,  0.0008,  0.0248, -0.0238],
        [-0.0085,  0.0057,  0.0012,  ..., -0.0088, -0.0058, -0.0127],
        [-0.0128,  0.0091,  0.0179,  ...,  0.0257,  0.0078,  0.0099],
        ...,
        [-0.0252,  0.0108,  0.0114,  ...,  0.0156, -0.0142, -0.0101],
        [ 0.0188,  0.0122,  0.0116,  ...,  0.0216,  0.0117, -0.0068],
        [ 0.0022, -0.0062,  0.0187,  ...,  0.0100, -0.0061,  0.0273]],
       device='cuda:0');
module.2.mlp.dense_4h_to_h;RowParallelLinear();(1024,);tensor([ 3.5072e-07, -6.1701e-07, -5.7381e-07,  ..., -3.1622e-06,
        -7.0885e-09,  3.4073e-07], device='cuda:0');
module.4;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([1.0000, 1.0000, 1.0000,  ..., 1.0000, 1.0000, 1.0000], device='cuda:0');
module.4;FusedLayerNorm(torch.Size([1024]), eps=1e-05, elementwise_affine=True);(1024,);tensor([ 2.9947e-07, -1.6608e-07, -6.6290e-07,  ..., -8.2493e-07,
        -1.9948e-07, -2.9883e-07], device='cuda:0');
